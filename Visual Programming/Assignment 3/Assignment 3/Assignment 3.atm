// CS Code

using System;
using System.Windows;

namespace Assignment_3 {

    public partial class MainWindow {
        
        // There values are displayed to the user
        private string equation;
        private string displayNumber;
        
        // Managing your equation
        private bool hasOperator;
        private string currentOperator;
        private float firstNumber;
        private float secondNumber;
        
        // helper variables
        private bool isAnswer;

        // Values related to Memory
        private float M;
        private bool mExists;
        
        public MainWindow() {
            InitializeComponent();
            reset();
        }
        
        
        // Managing M
        private void ButtonClick_M_store(object sender, RoutedEventArgs e) {
            M = float.Parse(displayNumber);
            mExists = true;
        }
        private void ButtonClick_M_add(object sender, RoutedEventArgs e) {
            M += float.Parse(displayNumber);
            mExists = true;
        }
        private void ButtonClick_M_subtract(object sender, RoutedEventArgs e) {
            M -= float.Parse(displayNumber);
            mExists = true;
        }
        private void ButtonClick_M_clear(object sender, RoutedEventArgs e) {
            M = 0;
            mExists = false;
        }
        private void ButtonClick_M_recall(object sender, RoutedEventArgs e) {
            if (mExists) {
                displayNumber = M.ToString();
                updateDisplay();
            }
        }
        private void ButtonClick_M_show(object sender, RoutedEventArgs e) {
            if (mExists)
                MessageBox.Show("M = " + M.ToString());
        }
        
        
        // Simple Changes to displayNumber
        private void ButtonClick_Negative(object sender, RoutedEventArgs e) {
            float displayFloat = float.Parse(displayNumber);
            displayFloat = -displayFloat;
            displayNumber = displayFloat.ToString();
            updateDisplay();
        }
        private void ButtonClick_Point(object sender, RoutedEventArgs e) {
            if (!displayNumber.Contains("."))
                displayNumber += ".";
            updateDisplay();
        }
       
        
        // Managing buttons with numbers
        private void ButtonClick_Number_0(object sender, RoutedEventArgs e) {
            AddNumberToEquation("0");
        } 
        private void ButtonClick_Number_1(object sender, RoutedEventArgs e) {
            AddNumberToEquation("1");
        }
        private void ButtonClick_Number_2(object sender, RoutedEventArgs e) {
            AddNumberToEquation("2");
        }
        private void ButtonClick_Number_3(object sender, RoutedEventArgs e) {
            AddNumberToEquation("3");
        }
        private void ButtonClick_Number_4(object sender, RoutedEventArgs e) {
            AddNumberToEquation("4");
        }
        private void ButtonClick_Number_5(object sender, RoutedEventArgs e) {
            AddNumberToEquation("5");
        }
        private void ButtonClick_Number_6(object sender, RoutedEventArgs e) {
            AddNumberToEquation("6");
        }
        private void ButtonClick_Number_7(object sender, RoutedEventArgs e) {
            AddNumberToEquation("7");
        }
        private void ButtonClick_Number_8(object sender, RoutedEventArgs e) {
            AddNumberToEquation("8");
        }
        private void ButtonClick_Number_9(object sender, RoutedEventArgs e) {
            AddNumberToEquation("9");
        }
        private void AddNumberToEquation(string number) {
            if (displayNumber == "0" || isAnswer) {
                displayNumber = number;
                if (isAnswer)
                    equation = "";
            }else {
                displayNumber += number;
            }
            updateDisplay();
        }
        
        
        // Managing Buttons with operators
        private void ButtonClick_Operator_Minus(object sender, RoutedEventArgs e) {
            AddOperator("-");
        }
        private void ButtonClick_Operator_Plus(object sender, RoutedEventArgs e) {
            AddOperator("+");
        }
        private void ButtonClick_Operator_Divide(object sender, RoutedEventArgs e) {
            AddOperator("/");
        }
        private void ButtonClick_Operator_Multiply(object sender, RoutedEventArgs e) {
            AddOperator("*");
        }
        private void ButtonClick_Operator_Modulus(object sender, RoutedEventArgs e) {
            AddOperator("%");
        }
        private void AddOperator(string operator_s) {
            if (hasOperator) {
                secondNumber = float.Parse(displayNumber);
                displayNumber = solveEquation();
            }
            firstNumber = float.Parse(displayNumber);
            equation = displayNumber + " " + operator_s + " ";
            currentOperator = operator_s;
            hasOperator = true;
            displayNumber = "0";
            isAnswer = false;
            updateDisplay();
        }
        
        
        // Operators that do direct calculations
        private void ButtonClick_Operator_Square(object sender, RoutedEventArgs e) {
            if (hasOperator) {
                secondNumber =  (float) Math.Pow(float.Parse(displayNumber), 2);
                equation += "(" + displayNumber + "^2)";
                displayNumber = solveEquation();
                hasOperator = false;
            }
            else {
                equation = "(" + displayNumber + "^2)";
                displayNumber = Math.Pow(float.Parse(displayNumber), 2).ToString();
            }
            updateDisplay();
        }
        private void ButtonClick_Operator_SquareRoot(object sender, RoutedEventArgs e) {
            if (hasOperator) {
                secondNumber =  (float) Math.Pow(float.Parse(displayNumber), 0.5);
                equation += "(" + displayNumber + "^(1/2))";
                displayNumber = solveEquation();
                hasOperator = false;
            }
            else {
                equation = "(" + displayNumber + "^(1/2))";
                displayNumber = Math.Pow(float.Parse(displayNumber), 0.5).ToString();
            }
            updateDisplay();
        }
        private void ButtonClick_Inverse(object sender, RoutedEventArgs e) {
            if (hasOperator) {
                secondNumber =  (1/float.Parse(displayNumber));
                equation += "(1/" + displayNumber + ")";
                displayNumber = solveEquation();
                hasOperator = false;
            }
            else {
                equation = "(1/" + displayNumber + ")";
                displayNumber = (1/float.Parse(displayNumber)).ToString();
            }
            updateDisplay();
        }

        
        // Managing button with functions.        
        private void ButtonClick_Function_ClearAll(object sender, RoutedEventArgs e) {
            reset();
        }
        private void ButtonClick_Function_Clear(object sender, RoutedEventArgs e) {
            if (isAnswer) {
                reset();
                return;
            }
            displayNumber = "0";
            updateDisplay();
        }
        private void ButtonClick_Function_Backspace(object sender, RoutedEventArgs e) {
            if (isAnswer)
                return;
            if (displayNumber.Length == 1) {
                displayNumber = "0";
            }else if (displayNumber.Length > 1) {
                displayNumber = displayNumber.Substring(0, displayNumber.Length - 1);
            }
            updateDisplay();
        }
        private void ButtonClick_Function_Solve(object sender, RoutedEventArgs e) {
            if (hasOperator) {
                secondNumber = float.Parse(displayNumber);
                equation += displayNumber;
                displayNumber = solveEquation();
                hasOperator = false;
                updateDisplay();
                isAnswer = true;
            }
        }

        
        // Helper Functions
        private void reset() {
            equation = "";
            isAnswer = false;
            hasOperator = false;
            firstNumber = 0;
            secondNumber = 0;
            displayNumber = "0";
            updateDisplay();
        }
        private string solveEquation() {
            string answer;
            
            switch (currentOperator) {
                case "+":
                    answer = (firstNumber + secondNumber).ToString();
                    break;
                case "-":
                    answer = (firstNumber - secondNumber).ToString();
                    break;
                case "/":
                    answer = (firstNumber / secondNumber).ToString();
                    break;
                case "*":
                    answer = (firstNumber * secondNumber).ToString();
                    break;
                case "%":
                    answer = (firstNumber % secondNumber).ToString();
                    break;
                default:
                    answer = "";
                    break;
            }

            return answer;
        }
        private void updateDisplay() {
            currentNumber.Content = displayNumber;
            currentEquation.Content = equation;
        }
    }
}


//
// XAML Code
//

<Window x:Class="Assignment_3.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        mc:Ignorable="d"
        Title="Calculator" Height="540" Width="400">
    <Grid>

        <Grid.RowDefinitions>
            <RowDefinition Height="0.5*"></RowDefinition>
            <RowDefinition Height="0.5*"/>
            <RowDefinition Height="*"></RowDefinition>
            <RowDefinition Height="0.5*"></RowDefinition>
            <RowDefinition Height="5*"></RowDefinition>
        </Grid.RowDefinitions>

        <Label Content="Standard" HorizontalAlignment="Left" VerticalAlignment="Center" FontWeight="Bold" FontSize="18" Padding="20,5,5,5"/>

        <Label Grid.Row="1" x:Name="currentEquation"  Content="" VerticalContentAlignment="Center" />
        
        <Label Grid.Row="2" x:Name="currentNumber" Content="0"  FontSize="48" FontWeight="Normal" FontFamily="Calibri" HorizontalContentAlignment="Right" VerticalContentAlignment="Bottom"/>

        <Grid Grid.Row="3">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="1*" />
                <ColumnDefinition Width="1*" />
                <ColumnDefinition Width="1*" />
                <ColumnDefinition Width="1*" />
                <ColumnDefinition Width="1*" />
                <ColumnDefinition Width="1*" />
            </Grid.ColumnDefinitions>
            <Button Grid.Column="0" Content="MC" Click="ButtonClick_M_clear" FontSize="20"/>
            <Button Grid.Column="1" Content="MR" Click="ButtonClick_M_recall" FontSize="20"/>
            <Button Grid.Column="2" Content="M+" Click="ButtonClick_M_add" FontSize="20"/>
            <Button Grid.Column="3" Content="M-" Click="ButtonClick_M_subtract" FontSize="20"/>
            <Button Grid.Column="4" Content="MS" Click="ButtonClick_M_store" FontSize="20"/>
            <Button Grid.Column="5" Content="M" Click="ButtonClick_M_show" FontSize="20"/>

        </Grid>
        
        <Grid Grid.Row="4">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="1*" />
                <ColumnDefinition Width="1*" />
                <ColumnDefinition Width="1*" />
                <ColumnDefinition Width="1*" />
            </Grid.ColumnDefinitions>
            <Grid.RowDefinitions>
                <RowDefinition Height="1*" />
                <RowDefinition Height="1*" />
                <RowDefinition Height="1*" />
                <RowDefinition Height="1*" />
                <RowDefinition Height="1*" />
                <RowDefinition Height="1*" />
            </Grid.RowDefinitions>


            <Button Grid.Row="0" Grid.Column="0" Content="%" Click="ButtonClick_Operator_Modulus" FontSize="20"/>
            <Button Grid.Row="0" Grid.Column="1" Content="CE" Click="ButtonClick_Function_Clear" FontSize="20"/>
            <Button Grid.Row="0" Grid.Column="2" Content="C" Click="ButtonClick_Function_ClearAll" FontSize="20"/>
            <Button Grid.Row="0" Grid.Column="3" Content="&lt;-" Click="ButtonClick_Function_Backspace" FontSize="20"/>

            <Button Grid.Row="5" Grid.Column="0" Content="+/-" Click="ButtonClick_Negative" Background="White" FontSize="20"/>
            <Button Grid.Row="5" Grid.Column="2" Content="." Click="ButtonClick_Point" Background="White" FontSize="20"/>
            <Button Grid.Row="5" Grid.Column="3" Content="=" Click="ButtonClick_Function_Solve" Background="#FFD7FF00" FontSize="20"/>
            <Button Grid.Row="5" Grid.Column="1" Content="0" Click="ButtonClick_Number_0" Background="White" FontWeight="Bold" FontSize="20"/>

            <Button Grid.Row="4" Grid.Column="0" Content="1" Click="ButtonClick_Number_1" Background="White" FontWeight="Bold" FontSize="20"/>
            <Button Grid.Row="4" Grid.Column="2" Content="3" Click="ButtonClick_Number_3" Background="White" FontWeight="Bold" FontSize="20"/>
            <Button Grid.Row="4" Grid.Column="3" Content="+" Click="ButtonClick_Operator_Plus" FontSize="20"/>
            <Button Grid.Row="4" Grid.Column="1" Content="2" Click="ButtonClick_Number_2" Background="White" FontWeight="Bold" FontSize="20"/>

            <Button Grid.Row="3" Grid.Column="0" Content="4" Click="ButtonClick_Number_4" Background="White" FontWeight="Bold" FontSize="20"/>
            <Button Grid.Row="3" Grid.Column="2" Content="6" Click="ButtonClick_Number_6" Background="White" FontWeight="Bold" FontSize="20"/>
            <Button Grid.Row="3" Grid.Column="3" Content="-" Click="ButtonClick_Operator_Minus" FontSize="20"/>
            <Button Grid.Row="3" Grid.Column="1" Content="5" Click="ButtonClick_Number_5" Background="White" FontWeight="Bold" FontSize="20"/>

            <Button Grid.Row="2" Grid.Column="0" Content="7" Click="ButtonClick_Number_7" Background="White" FontWeight="Bold" FontSize="20"/>
            <Button Grid.Row="2" Grid.Column="2" Content="9" Click="ButtonClick_Number_9" Background="White" FontWeight="Bold" FontSize="20"/>
            <Button Grid.Row="2" Grid.Column="3" Content="*" Click="ButtonClick_Operator_Multiply" FontSize="20"/>
            <Button Grid.Row="2" Grid.Column="1" Content="8" Click="ButtonClick_Number_8" Background="White" FontWeight="Bold" FontSize="20"/>

            <Button Grid.Row="1" Grid.Column="0" Content="1/x" Click="ButtonClick_Inverse" FontSize="18"/>
            <Button Grid.Row="1" Grid.Column="1" Content="x^(1/2)" Click="ButtonClick_Operator_SquareRoot"  FontSize="18"/>
            <Button Grid.Row="1" Grid.Column="3" Content="/" Click="ButtonClick_Operator_Divide" FontSize="20"/>
            <Button Grid.Row="1" Grid.Column="2" Content="x^2" Click="ButtonClick_Operator_Square"  FontSize="18"/>
        </Grid>

    </Grid>
</Window>
